<?php

namespace App\Console\Commands;

use App\Models\Store;
use App\Models\Notification;
use App\Models\StoreInventory;
use App\Models\Product;
use App\Models\Warehouse;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class GenerateSmartShipmentRequests extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'stores:smart-shipment-requests 
                           {--dry-run : Show what would be generated without creating requests}
                           {--min-shortage-days=7 : Minimum days a product should be in shortage}
                           {--low-stock-threshold=10 : Products with stock below this will be requested}
                           {--demand-multiplier=2 : Multiply recent sales to predict needed quantity}';

    /**
     * The console command description.
     */
    protected $description = 'Generate intelligent shipment requests based on store inventory analysis and demand patterns';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $isDryRun = $this->option('dry-run');
        $minShortagedays = (int) $this->option('min-shortage-days');
        $lowStockThreshold = (int) $this->option('low-stock-threshold');
        $demandMultiplier = (float) $this->option('demand-multiplier');
        
        if ($isDryRun) {
            $this->info('üß™ DRY RUN MODE - Kh√¥ng c√≥ y√™u c·∫ßu n√†o ƒë∆∞·ª£c t·∫°o th·ª±c s·ª±');
        }
        
        $this->info('üß† B·∫Øt ƒë·∫ßu ph√¢n t√≠ch th√¥ng minh ƒë·ªÉ t·∫°o y√™u c·∫ßu g·ª≠i h√†ng...');
        
        $stores = Store::whereNotNull('id')
            ->with(['inventory' => function ($q) {
                $q->with('product');
            }])
            ->get();

        if ($stores->isEmpty()) {
            $this->warn('‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng n√†o.');
            return Command::SUCCESS;
        }

        $this->info("üìä Ph√¢n t√≠ch {$stores->count()} c·ª≠a h√†ng...");

        $totalRequests = 0;
        $totalProducts = 0;
        $storesWithRequests = 0;

        foreach ($stores as $store) {
            $analysis = $this->analyzeStoreShipmentNeeds($store, $lowStockThreshold, $demandMultiplier);
            
            if (!empty($analysis['products_needed'])) {
                $storesWithRequests++;
                
                if ($isDryRun) {
                    $this->displayAnalysis($store, $analysis);
                } else {
                    $request = $this->createShipmentRequest($store, $analysis);
                    if ($request) {
                        $totalRequests++;
                        $totalProducts += count($analysis['products_needed']);
                    }
                }
            }
        }

        if ($isDryRun) {
            $this->info("üîç Ph√¢n t√≠ch ho√†n th√†nh: {$storesWithRequests} c·ª≠a h√†ng c·∫ßn b·ªï sung h√†ng");
        } else {
            $this->info("‚úÖ ƒê√£ t·∫°o {$totalRequests} y√™u c·∫ßu g·ª≠i h√†ng cho {$storesWithRequests} c·ª≠a h√†ng");
            $this->info("üì¶ T·ªïng c·ªông {$totalProducts} s·∫£n ph·∫©m c·∫ßn b·ªï sung");
            
            // Ghi log ho·∫°t ƒë·ªông
            Log::info('Smart shipment requests generated', [
                'stores_analyzed' => $stores->count(),
                'stores_with_requests' => $storesWithRequests,
                'total_requests' => $totalRequests,
                'total_products' => $totalProducts,
                'parameters' => [
                    'low_stock_threshold' => $lowStockThreshold,
                    'demand_multiplier' => $demandMultiplier,
                    'min_shortage_days' => $minShortagedays
                ]
            ]);
        }

        return Command::SUCCESS;
    }

    /**
     * Analyze store's shipment needs based on inventory and demand patterns
     */
    private function analyzeStoreShipmentNeeds($store, $lowStockThreshold, $demandMultiplier)
    {
        $productsNeeded = [];
        $totalValue = 0;
        $urgentCount = 0;
        $reasons = [];

        // L·∫•y t·ªìn kho c·ª≠a h√†ng
        $inventory = $store->inventory;
        
        if ($inventory->isEmpty()) {
            // N·∫øu kh√¥ng c√≥ t·ªìn kho, ƒë·ªÅ xu·∫•t c√°c s·∫£n ph·∫©m ph·ªï bi·∫øn
            $popularProducts = Product::take(5)->get();
            
            foreach ($popularProducts as $product) {
                $suggestedQuantity = rand(10, 30);
                $productsNeeded[] = [
                    'product_id' => $product->id,
                    'product_name' => $product->name,
                    'product_sku' => $product->sku,
                    'current_stock' => 0,
                    'suggested_quantity' => $suggestedQuantity,
                    'unit_price' => $product->price,
                    'total_price' => $product->price * $suggestedQuantity,
                    'urgency' => 'medium',
                    'reason' => 'S·∫£n ph·∫©m m·ªõi cho c·ª≠a h√†ng'
                ];
                $totalValue += $product->price * $suggestedQuantity;
            }
            
            $reasons[] = 'C·ª≠a h√†ng ch∆∞a c√≥ t·ªìn kho';
        } else {
            // Ph√¢n t√≠ch t·ªìn kho hi·ªán c√≥
            foreach ($inventory as $item) {
                $analysis = $this->analyzeProductNeed($item, $lowStockThreshold, $demandMultiplier);
                
                if ($analysis['needs_restock']) {
                    $productsNeeded[] = $analysis;
                    $totalValue += $analysis['total_price'];
                    
                    if ($analysis['urgency'] === 'high') {
                        $urgentCount++;
                    }
                    
                    $reasons[] = $analysis['reason'];
                }
            }
        }

        // T√≠nh to√°n m·ª©c ƒë·ªô ∆∞u ti√™n d·ª±a tr√™n t·ªïng gi√° tr·ªã v√† t√≠nh c·∫•p thi·∫øt
        $priority = 'normal';
        if ($urgentCount > 0 || $totalValue > 2000000) {
            $priority = 'high';
        } elseif ($totalValue > 500000) {
            $priority = 'medium';
        }

        return [
            'products_needed' => $productsNeeded,
            'total_value' => $totalValue,
            'urgent_products' => $urgentCount,
            'priority' => $priority,
            'reasons' => array_unique($reasons),
            'analysis_summary' => $this->buildAnalysisSummary($productsNeeded, $totalValue, $urgentCount)
        ];
    }

    /**
     * Analyze individual product restocking needs
     */
    private function analyzeProductNeed($inventoryItem, $lowStockThreshold, $demandMultiplier)
    {
        $product = $inventoryItem->product;
        $currentStock = $inventoryItem->quantity;
        
        // X√°c ƒë·ªãnh xem c√≥ c·∫ßn nh·∫≠p th√™m h√†ng kh√¥ng
        $needsRestock = $currentStock <= $lowStockThreshold;
        
        if (!$needsRestock) {
            return ['needs_restock' => false];
        }        // T√≠nh to√°n s·ªë l∆∞·ª£ng ƒë·ªÅ xu·∫•t d·ª±a tr√™n nhi·ªÅu y·∫øu t·ªë
        $baseQuantity = $lowStockThreshold * 2; // T·ªìn kho an to√†n c∆° b·∫£n
        
        // M√¥ ph·ªèng ph√¢n t√≠ch nhu c·∫ßu (trong ·ª©ng d·ª•ng th·ª±c t·∫ø, ƒëi·ªÅu n√†y s·∫Ω s·ª≠ d·ª•ng d·ªØ li·ªáu b√°n h√†ng th·ª±c t·∫ø)
        $simulatedWeeklyDemand = rand(5, 25);
        $demandBasedQuantity = $simulatedWeeklyDemand * $demandMultiplier;
        
        $suggestedQuantity = max($baseQuantity, $demandBasedQuantity);
        
        // X√°c ƒë·ªãnh t√≠nh c·∫•p thi·∫øt
        $urgency = 'normal';
        $reason = 'B·ªï sung t·ªìn kho th∆∞·ªùng xuy√™n';
        
        if ($currentStock == 0) {
            $urgency = 'high';
            $reason = 'H·∫øt h√†ng ho√†n to√†n';
            $suggestedQuantity *= 1.5; // TƒÉng s·ªë l∆∞·ª£ng cho c√°c s·∫£n ph·∫©m h·∫øt h√†ng
        } elseif ($currentStock <= $lowStockThreshold / 2) {
            $urgency = 'high';
            $reason = 'T·ªìn kho c·ª±c th·∫•p';
        } elseif ($currentStock <= $lowStockThreshold) {
            $urgency = 'medium';
            $reason = 'T·ªìn kho th·∫•p d∆∞·ªõi m·ª©c an to√†n';
        }

        return [
            'needs_restock' => true,
            'product_id' => $product->id,
            'product_name' => $product->name,
            'product_sku' => $product->sku,
            'current_stock' => $currentStock,
            'suggested_quantity' => round($suggestedQuantity),
            'unit_price' => $product->price,
            'total_price' => $product->price * round($suggestedQuantity),
            'urgency' => $urgency,
            'reason' => $reason,
            'weekly_demand_estimate' => $simulatedWeeklyDemand
        ];
    }

    /**
     * Display analysis results in dry-run mode
     */
    private function displayAnalysis($store, $analysis)
    {
        $this->info("\nüìç C·ª≠a h√†ng: {$store->name} (ID: {$store->id})");
        $this->info("üí∞ T·ªïng gi√° tr·ªã c·∫ßn b·ªï sung: " . number_format($analysis['total_value'], 0, ',', '.') . " VNƒê");
        $this->info("üî• S·∫£n ph·∫©m c·∫•p b√°ch: {$analysis['urgent_products']}");
        $this->info("‚≠ê ƒê·ªô ∆∞u ti√™n: {$analysis['priority']}");
        
        if (!empty($analysis['products_needed'])) {
            $this->info("üì¶ S·∫£n ph·∫©m c·∫ßn b·ªï sung:");
            
            foreach ($analysis['products_needed'] as $product) {
                $urgencyIcon = $product['urgency'] === 'high' ? 'üî¥' : ($product['urgency'] === 'medium' ? 'üü°' : 'üü¢');
                $this->line("   {$urgencyIcon} {$product['product_name']} (Hi·ªán c√≥: {$product['current_stock']}, C·∫ßn: {$product['suggested_quantity']}) - {$product['reason']}");
            }
        }
    }

    /**
     * Create shipment request notification
     */
    private function createShipmentRequest($store, $analysis)
    {
        try {
            $warehouse = Warehouse::first();
              $notification = Notification::create([
                'store_id' => $store->id,
                'title' => "Y√™u c·∫ßu g·ª≠i h√†ng th√¥ng minh t·ª´ {$store->name}",
                'message' => $analysis['analysis_summary'],
                'type' => 'receive_request',
                'status' => 'pending',
                'warehouse_id' => $warehouse ? $warehouse->id : null,
                'data' => [
                    'store_name' => $store->name,
                    'products' => $analysis['products_needed'],
                    'total_value' => $analysis['total_value'],
                    'product_count' => count($analysis['products_needed']),
                    'urgent_products' => $analysis['urgent_products'],
                    'priority' => $analysis['priority'],
                    'reasons' => $analysis['reasons'],
                    'auto_generated' => true,
                    'generation_type' => 'smart_shipment',
                    'analysis_date' => now()->toDateString(),
                    'analysis_details' => $analysis
                ]
            ]);

            $this->info("‚úÖ T·∫°o y√™u c·∫ßu g·ª≠i h√†ng th√¥ng minh cho: {$store->name}");
            return $notification;

        } catch (\Exception $e) {
            $this->error("‚ùå L·ªói khi t·∫°o y√™u c·∫ßu cho {$store->name}: {$e->getMessage()}");
            Log::error("Failed to create smart shipment request for store {$store->id}", [
                'store_id' => $store->id,
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * Build analysis summary message
     */
    private function buildAnalysisSummary($productsNeeded, $totalValue, $urgentCount)
    {
        $productCount = count($productsNeeded);
        $summary = "Ph√¢n t√≠ch th√¥ng minh: C·ª≠a h√†ng c·∫ßn b·ªï sung {$productCount} s·∫£n ph·∫©m v·ªõi t·ªïng gi√° tr·ªã " . 
                  number_format($totalValue, 0, ',', '.') . " VNƒê";
        
        if ($urgentCount > 0) {
            $summary .= ". C√≥ {$urgentCount} s·∫£n ph·∫©m c·∫•p b√°ch c·∫ßn x·ª≠ l√Ω ngay";
        }
        
        $summary .= ". ƒê∆∞·ª£c t·∫°o b·ªüi h·ªá th·ªëng ph√¢n t√≠ch t·ª± ƒë·ªông d·ª±a tr√™n m·ª©c t·ªìn kho v√† m·∫´u nhu c·∫ßu.";
        
        return $summary;
    }
}
